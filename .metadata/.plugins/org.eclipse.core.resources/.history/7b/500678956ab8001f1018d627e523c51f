/*
 * activity_tracking.h
 *
 *  Created on: Dec 9, 2024
 *      Author: anton
 */


/*
 * step_Counter.h
 *
 *  Created on: Dec 9, 2024
 *      Author: anton
 */

#ifndef ACTIVITY_TRACKING_H_
#define ACTIVITY_TRACKING_H_

#include "main.h"

#define RM 10000 		//FSR Resistance
#define STEP_TRESHOLD 2000          // Soglia  per considerare gli fsr premuti e quindi contare un passo
#define RUNNING_STEP_THRESHOLD 350    // Soglia (ms) per considerare l'utente in corsa
#define RESTING_MIN_TIME 2000    // Soglia(ms) per considerare l'utente effettivamente fermo
#define STEP_BUFFER_SIZE 10  // dimensione del buffer dei passi

typedef struct {
    int steps;         //contiene il numero di passi
    uint32_t last_step_time; //contiene il tempo dell'ultimo passo
    uint32_t t1;
    float right_sensor;
    float left_sensor;
    int step_detection; // lo utilizzo come un booleano per evitare che lo stesso passo venga contato due volte
	UserState state;         // ULTIMO STATO RILEVATO
    uint32_t last_state_time; // Tempo dell'ultimo stato rilevato
} UserActivity;




typedef struct{
	uint32_t steps[STEP_BUFFER_SIZE]; // Buffer per i tempi tra i passi
	int8_t index;
    uint32_t total_step_time; // Somma totale dei tempi tra i passi
}StepBuffer;


typedef enum {
    RESTING,
    WALKING,
    RUNNING
}UserState;

const char* userState_to_string(UserState *state)
void StepBuffer_init(StepBuffer *buffer);
void UserActivity_init(UserActivity *activity);
void read_forceSensor(uint16_t *d_out, float *sensor);
void step_counter(UserActivity *activity, StepBuffer *buffer);
void detect_activity(UserActivity *activity, StepBuffer *buffer , ledConfig *red_led, ledConfig *green_led, ledConfig *yellow_led);


#endif /* ACTIVITY_TRACKING_H_ */
