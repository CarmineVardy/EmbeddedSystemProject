/*
 * button.c
 *
 *  Created on: Dec 9, 2024
 *      Author: utente
 */

#include "button.h"
#include "stdio.h"

void button_init (buttonConfig* button, char* user_label, GPIO_TypeDef* GPIO_Port, GPIO_PinState init_state){

	button->user_label = user_label;
	button->GPIO_Pin = GPIO_button_Pin;
	button->temp_state = init_state;
	button->stable_state = init_state;
	button->count = 0;
}




GPIO_PinState read_button(buttonDef* button)
{

	/**
	 * @brief Reads the state of the button with debounce in non-blocking mode
	 *
	 * @param button        Pointer to the buttonDef structure representing the button.
	 *
	 * @return GPIO_PinState    The stable state of the button
	 */

	GPIO_PinState current_state = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);

	if (current_state == button->temp_state) //Stable read
	{
		button->count++;
		if (button->count >= COUNT_LIMIT)
		{
			button->count = 0;
			button->stable_state = current_state; //set the stable state
		}
		//NOTE: The stable time depends on the duration of other instruction in the while(1) loop.

	}	else //Unstable read
		{
			button->count = 0;
			button->temp_state = current_state; //update the temp state but not set the stable state
		}

	return button->stable_state;
}


