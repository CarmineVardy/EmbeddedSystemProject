/*
 * activity_tracking.h
 *
 *  Created on: Dec 12, 2024
 *      Author: utente
 */
#ifndef INC_ACTIVITY_TRACKING_H_
#define INC_ACTIVITY_TRACKING_H_

#include "main.h"
#include <stdint.h>

#define STEP_THRESHOLD 200       // Soglia per determinare il contatto col suolo
#define RUNNING_THRESHOLD 600    // Soglia per lo stato "RUNNING"
#define INACTIVITY_TIMEOUT 2000  // 5 secondi di inattivit√†


typedef enum {
    RESTING,
    WALKING,
    RUNNING
} UserState;

typedef struct {
    float data;                // Dato del sensore
    uint8_t foot_on_ground;    // Stato del piede (1 = a terra, 0 = sollevato)
    uint8_t prev_foot_on_ground; // Stato precedente
} FSR_Sensor;

typedef struct {
    uint32_t steps;            // Numero totale di passi
    uint32_t last_step_time;   // Tempo dell'ultimo passo rilevato (in ms)
    FSR_Sensor left_foot;      // Sensore del piede sinistro
    FSR_Sensor right_foot;     // Sensore del piede destro
    UserState state;
} UserActivity;

typedef struct {
	uint32_t total_step_time;  // Somma dei tempi tra i passi
	uint32_t count;            // Contatore
    uint32_t length;           // Dimensione del buffer
} StepBuffer;

void init_fsr_sensor(FSR_Sensor *sensor);
void UserActivity_init(UserActivity *user_activity);
void StepBuffer_init(StepBuffer *buffer, uint32_t* steps, uint32_t length);
void read_forceSensor(uint16_t *d_out, FSR_Sensor *sensor);
void add_step_time(StepBuffer *buffer, uint32_t step_time);
void determine_activity(UserActivity *user_activity, uint32_t current_time, StepBuffer *step_buffer);
void update_step_count(UserActivity *user_activity, uint32_t current_time, StepBuffer *step_buffer);
const char* userState_to_string(UserState state);
void update_running_walking_state(StepBuffer *step_buffer,UserActivity *user_activity);
void update_resting_state(UserActivity *user_activity);
void update_walking_state(UserActivity *user_activity);
void update_running_state(UserActivity *user_activity);

#endif /* INC_ACTIVITY_TRACKING_H_ */



