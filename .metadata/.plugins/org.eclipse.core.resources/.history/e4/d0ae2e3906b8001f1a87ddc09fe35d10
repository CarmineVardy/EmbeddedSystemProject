/*
 * read_temperature.c
 *
 *  Created on: Dec 5, 2024
 *      Author: utente
 */

#include "read_temperature.h"
#include <math.h>

void init_TemperatureParams(TempParam *tempParam) {
    // Inizializza la temperatura corrente a 0.0 (assumendo che la lettura non sia ancora avvenuta)
    tempParam->currentTemperature = 0.0;

    // La temperatura precedente è anch'essa inizialmente 0.0
    tempParam->previousTemperature = 0.0;

    // La temperatura stabile è inizialmente 0.0
    tempParam->stableTemperature = 0.0;

    // Inizializza lo stato di stabilità a 0 (non stabile)
    tempParam->isStable = 0;

    // Conta il numero di campioni stabiliti per rilevare la stabilità
    tempParam->stabilityCounter = 0;

    // Inizializza la variabile di rilevamento variazioni a 0 (nessuna variazione rilevata)
    tempParam->variationDetected = 0;
}


double calculate_Temperature(uint16_t d_out) {
    // Calcola la tensione in ingresso a partire dal valore ADC (d_out)
    // VREF è la tensione di riferimento e LEVELS è il numero di livelli del convertitore ADC
    double voltage = ((double)d_out) * VREF / LEVELS;

    // Calcola la resistenza in base alla formula del termistore (legge il valore di tensione)
    // RS è il valore di resistenza noto, e VREF è la tensione di riferimento
    double resistance = (-RS * (voltage)) / (voltage - VREF);

    // Calcola la temperatura a partire dalla resistenza usando l'equazione di Steinhart-Hart
    // BETA, R0 e T0 sono parametri specifici del termistore
    // La formula restituisce la temperatura in gradi Celsius, quindi si sottrae 273.15 per ottenere il risultato in °C
    return (BETA) / (log(resistance / R0) + BETA / T0) - 273.15;
}


void read_Temperature(TempParam *tempParam, uint16_t d_out) {

	tempParam->currentTemperature = calculate_TemperatureFromVoltage(d_out);

    check_Stability(tempParam);

    tempParam->previousTemperature = tempParam->currentTemperature;
}

void check_Stability(TempParam *tempParam) {
    if (fabs(tempParam->currentTemperature - tempParam->previousTemperature) > STABILITY_THRESHOLD) {
        if (!tempParam->variationDetected) {
            tempParam->variationDetected = 1;
            tempParam->isStable = 0;
        }
        tempParam->stabilityCounter = 0;
    } else {
        if (tempParam->variationDetected) {
            tempParam->stabilityCounter++;
            if (tempParam->stabilityCounter >= STABILITY_SAMPLES) {
                if (fabs(tempParam->currentTemperature - tempParam->stableTemperature) > STABILITY_THRESHOLD) {
                    tempParam->stableTemperature = tempParam->currentTemperature;
                }
                tempParam->variationDetected = 0;
                tempParam->isStable = 1;
            }
        }
    }
}

void reset_TemperatureParams(TempParam *tempParam){

	tempParam->currentTemperature = 0.0;
	tempParam->previousTemperature = 0.0;
	tempParam->stableTemperature = 0.0;
	tempParam->isStable = 0;
	tempParam->stabilityCounter = 0;
	tempParam->variationDetected = 0;

}



