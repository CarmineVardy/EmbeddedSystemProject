/*
 * ECG_module.c
 *
 *  Created on: Dec 10, 2024
 *      Author: utente
 */

#include "ECG_module.h"

void ECG_init(FilterECGParam* FilterECGparam, ECGParam* ECGparam, uint16_t* buffer1, uint16_t* buffer2, uint16_t length1, uint16_t length2){

	FilterECGparam->buffer = buffer1;
	FilterECGparam->sum = 0.0;
	FilterECGparam->index = 0;
	FilterECGparam->length = length1;
	FilterECGparam->filled = 0;

	for (uint16_t i = 0; i < length1; i++)
	{
		buffer1[i] = 0;
	}

	ECGparam->buffer = buffer2;
	ECGparam->count = 0;
	ECGparam->length = length2;

}

void filter_signal(FilterECGParam* FilterECGparam, ECGParam* ECGparam, uint16_t d_out)
{
	FilterECGparam->sum = FilterECGparam->sum - FilterECGparam->buffer[FilterECGparam->index] + d_out;
	FilterECGparam->buffer[FilterECGparam->index] = d_out;
	FilterECGparam->index = (FilterECGparam->index + 1) % FilterECGparam->length;

	if (FilterECGparam->filled < FilterECGparam->length)
	{
		FilterECGparam->filled++;
	}

	ECGparam->buffer[ECGparam->count] = FilterECGparam->sum / FilterECGparam->filled;
	ECGparam->count++;

}

HAL_StatusTypeDef elab_ECG(ECGParam* ECGparam, uint16_t samp_time){Ã¹

	uint16_t peaks[MAX_ARRAY_DIM];
	uint8_t num_peaks = 0;

	find_peaks(&ECGparam, peaks, &num_peaks);

	if (num_peaks < 2) {
		return HAL_ERROR;
	}

}
uint16_t find_max(ECGParam* ECGparam){

}
uint16_t find_min(ECGParam* ECGparam){

}
HAL_StatusTypeDef find_peaks(ECGParam* ECGparam){

}

//trovo il massimo, il minimo e trovo la soglia come fa il prof

//trovo i picchi e conservo gli indici
//if ((buffer[i] > th) && (buffer[i] > buffer[i - 1]) && (buffer[i] > buffer[i + 1]))
 //    {
 //        peaks[count] = i; // Store the index of the peak

//uint16_t max_value = find_max(buffer, length);
//uint16_t min_value = find_min(buffer, length);
//uint16_t th = (uint16_t)(TRESHOLDPEAKS * (max_value-min_value)) + min_value; // Threshold value

//calcola il bpm come la media degli intervalli





