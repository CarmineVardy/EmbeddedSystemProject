/*
 * ECG_module.c
 *
 *  Created on: Dec 10, 2024
 *      Author: utente
 */

#include "ECG_module.h"
#include <math.h>

void ECG_init_Filter(FilterECGParam* FilterECGparam, uint16_t* buffer1, uint16_t length1) {
    // Imposta il buffer di input nella struttura FilterECGParam
    FilterECGparam->buffer = buffer1;

    // Inizializza i parametri del filtro
    FilterECGparam->sum = 0.0;    // La somma dei valori nel filtro (utilizzato nel calcolo)
    FilterECGparam->index = 0;    // Indice di posizione nel buffer (utilizzato nel filtro circolare)
    FilterECGparam->length = length1;    // Lunghezza del buffer
    FilterECGparam->filled = 0;   // Numero di elementi validi nel buffer

    // Inizializza il buffer impostando tutti i valori a 0
    for (uint16_t i = 0; i < length1; i++) {
        buffer1[i] = 0;
    }
}

void ECG_init_ECG(ECGParam* ECGparam, uint16_t* buffer2, uint16_t length2) {
    // Imposta il buffer di input nella struttura ECGParam
    ECGparam->buffer = buffer2;

    // Inizializza i parametri relativi all'elaborazione dell'ECG
    ECGparam->count = 0;         // Numero di campioni elaborati
    ECGparam->length = length2;  // Lunghezza del buffer
    ECGparam->HR = 0;            // Frequenza cardiaca (in battiti per minuto, bpm)
    ECGparam->HRV = 0.0;         // VariabilitÃ  della frequenza cardiaca (HRV)
}

void filter_signal(FilterECGParam* FilterECGparam, ECGParam* ECGparam, uint16_t d_out) {

	// Calcolo del valore di tensione in ingresso in base al dato di uscita d_out
    double voltage = ((double)d_out) * VREF / LEVELS;

    // Aggiornamento della somma per la media mobile
    FilterECGparam->sum += voltage - FilterECGparam->buffer[FilterECGparam->index];
    FilterECGparam->buffer[FilterECGparam->index] = voltage;

    // Aggiornamento dell'indice del buffer in modo circolare
    FilterECGparam->index = (FilterECGparam->index + 1) % FilterECGparam->length;

    // Aumento del contatore degli elementi validi nel filtro
    if (FilterECGparam->filled < FilterECGparam->length) {
        FilterECGparam->filled++;
    }

    // Calcolo del valore medio e memorizzazione nel buffer ECG
    ECGparam->buffer[ECGparam->count] = (uint16_t)(FilterECGparam->sum / FilterECGparam->filled);

    // Incremento del contatore dei campioni elaborati
    ECGparam->count++;
}


uint8_t calculate_intervals(uint16_t* peaks, uint8_t num_peaks, float* intervals) {

	uint8_t validIntervals = 0;

    // Calcola gli intervalli tra i picchi
    for (int i = 1; i < num_peaks; i++) {
        float interval = (float)(peaks[i] - peaks[i - 1]);
        // Considera solo intervalli validi (tra 20 e 500)
        if (interval > 20 && interval < 500) {
            intervals[validIntervals++] = interval;
        }
    }
    return validIntervals; // Ritorna il numero di intervalli validi

}

HAL_StatusTypeDef find_ecg_peaks(ECGParam* ECGparam, uint16_t* peaks, uint8_t* num_peaks) {

	// Trova i picchi nel segnale ECG
    if (find_peaks(ECGparam, peaks, num_peaks) != HAL_OK) {
        return HAL_ERROR; // Se non si trovano picchi, ritorna errore
    }
    return HAL_OK; // Restituisce successo se i picchi sono stati trovati correttamente
}



HAL_StatusTypeDef find_peaks(ECGParam* ECGparam, uint16_t *peaks, uint8_t *num_peaks) {

    if (ECGparam->count < 3) {
        *num_peaks = 0;
        return HAL_ERROR;
    }

    uint16_t max_value = find_max(ECGparam->buffer, ECGparam->count);
    uint16_t min_value = find_min(ECGparam->buffer, ECGparam->count);
    uint16_t threshold = (uint16_t)(TRESHOLDPEAKS * (max_value - min_value)) + min_value;

    uint8_t count = 0;
    uint8_t aboveThresholdState = 0; // 0 = sotto soglia, 1 = sopra soglia

    for (uint16_t i = 1; i < ECGparam->count - 1; i++) {
        int16_t derivative = (int16_t)(ECGparam->buffer[i] - ECGparam->buffer[i - 1]);

        // Controllo fronte di salita e discesa
        if (aboveThresholdState == 0 && derivative > 0 && ECGparam->buffer[i] >= threshold && ECGparam->buffer[i - 1] < threshold) {
            aboveThresholdState = 1;
        } else if (aboveThresholdState == 1 && ECGparam->buffer[i] < threshold) {
            aboveThresholdState = 0;
        }

        // Controllo picco locale
        if (ECGparam->buffer[i] > threshold &&
            ECGparam->buffer[i] > ECGparam->buffer[i - 1] &&
            ECGparam->buffer[i] > ECGparam->buffer[i + 1]) {

            // Assicurarsi che il picco sia valido considerando anche il fronte di salita
            if (aboveThresholdState == 1) {
                peaks[count] = i;
                count++;

                if (count >= MAX_ARRAY_DIM) {
                    break;
                }

                // Prevenire duplicazione di picchi nella stessa area
                aboveThresholdState = 0;
            }
        }
    }

    *num_peaks = count;
    return HAL_OK;
}


uint16_t find_max(uint16_t *buffer, uint16_t length)
{
	if (length == 0) {
        return 0;
    }

    uint16_t max = buffer[0];
    for (uint16_t i = 1; i < length; i++) {
        if (buffer[i] > max) {
            max = buffer[i];
        }
    }
    return max;
}

uint16_t find_min(uint16_t *buffer, uint16_t length)
{

	if (length == 0) {
        return 0;
    }

    uint16_t min = buffer[0];
    for (uint16_t i = 1; i < length; i++) {
        if (buffer[i] < min) {
            min = buffer[i];
        }
    }
    return min;
}

void reset_ECG(FilterECGParam* FilterECGparam, ECGParam* ECGparam){

	FilterECGparam->sum = 0.0;
	FilterECGparam->index = 0;
	FilterECGparam->filled = 0;

	for (uint16_t i = 0; i < FilterECGparam->length; i++)
	{
		FilterECGparam->buffer[i] = 0;
	}

	ECGparam->count = 0;

	for (uint16_t i = 0; i < ECGparam->length; i++)
	{
		ECGparam->buffer[i] = 0;
	}

}








